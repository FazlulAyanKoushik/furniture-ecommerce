"""
Django settings for projectile project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys

from datetime import timedelta

import dj_database_url


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# The root of the git repo - Could be ~/project or ~/repo
REPO_DIR = os.path.realpath(os.path.join(BASE_DIR, ".."))
# The directory of the current user ie /home/django a.k.a. ~
HOME_DIR = os.path.realpath(os.path.join(REPO_DIR, ".."))
# The directory where collectstatic command copies/symlinks the files to
# This can/should be located at ~/staticfiles, preferrably outside the git repo
STATIC_DIR = os.path.realpath(os.path.join(HOME_DIR, "staticfiles"))
# The directory where different applications uploads media files to
# This can/should be located at ~/media, preferrably outside the git repo
MEDIA_DIR = os.path.realpath(os.path.join(HOME_DIR, "media"))


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_ROOT = STATIC_DIR
STATIC_URL = "/static/"

MEDIA_ROOT = MEDIA_DIR
MEDIA_URL = "/media/"


STATICFILES_DIRS = [os.path.join(REPO_DIR, "assets")]

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "y6mx*_ea#d!g1x^l_lxfdjf$$ihzwy6jce=n8nb#35i*8z)-)k"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

INTERNAL_IPS = [
    "127.0.0.1",
]

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "django_extensions",
    "simple_history",
    "rest_framework",
    "rest_framework_simplejwt",
    "drf_yasg",
    "django_filters",
    "django_rest_passwordreset",
    "sorl.thumbnail",
    "storages",
    "collectfast",
    "anymail",
    "axes",
    "versatileimagefield",
]

HEALTH_CHECK_APPS = [
    "health_check",
    "health_check.db",
    "health_check.cache",
    "health_check.storage",
    "health_check.contrib.migrations",
    "health_check.contrib.celery",
    "health_check.contrib.celery_ping",
    "health_check.contrib.s3boto3_storage",
    "health_check.contrib.redis",
]

PROJECT_APPS = [
    "common",
    "core",
    "accountio",
    "catalogio",
    "gruppio",
    "collabio",
    "newsdeskio",
    "mediaroomio",
    "fileroomio",
    "weapi",
    "leadio",
    "search",
    "invitio",
    "tagio",
    "otpio",
    "scrapio",
    "paymentio",
    "populario",
    "publicapi",
    "notificationio",
    "adio",
    "contentio",
    "threadio",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS + HEALTH_CHECK_APPS


# swagger settings
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {"basic": {"type": "basic"}},
}

REDOC_SETTINGS = {
    "LAZY_RENDERING": False,
}


AUTH_USER_MODEL = "core.User"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
    "axes.middleware.AxesMiddleware",
]


if os.environ.get("ENABLE_CORS_HEADERS", False) == "True":
    THIRD_PARTY_APPS = [
        "corsheaders",
    ] + THIRD_PARTY_APPS
    MIDDLEWARE = [
        "corsheaders.middleware.CorsMiddleware",
    ] + MIDDLEWARE


if os.environ.get("ENABLE_DEBUG_TOOLBAR", False) == "True":
    THIRD_PARTY_APPS = [
        "debug_toolbar",
    ] + THIRD_PARTY_APPS
    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ] + MIDDLEWARE

ROOT_URLCONF = "projectile.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "projectile.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
# DATABASES = {"default": dj_database_url.config(conn_max_age=300)}
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    "axes.backends.AxesStandaloneBackend",
    "django.contrib.auth.backends.ModelBackend",
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Stockholm"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

APPEND_SLASH = False

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "30/minute", "user": "120/minute"},
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "PAGE_SIZE": 40,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "UPDATE_LAST_LOGIN": True,
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
        "simple": {"format": "%(levelname)s %(message)s"},
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "default": {"level": "INFO", "handlers": ["console"]},
        "common": {"level": "DEBUG", "handlers": ["console"]},
        "core": {"level": "DEBUG", "handlers": ["console"]},
        "accountio": {"level": "DEBUG", "handlers": ["console"]},
        "catalogio": {"level": "DEBUG", "handlers": ["console"]},
        "mediaroomio": {"level": "DEBUG", "handlers": ["console"]},
        "fileroomio": {"level": "DEBUG", "handlers": ["console"]},
        "newsdeskio": {"level": "DEBUG", "handlers": ["console"]},
        "gruppio": {"level": "DEBUG", "handlers": ["console"]},
        "collabio": {"level": "DEBUG", "handlers": ["console"]},
    },
}


# ELASTICSEARCH SETTINGS
ELASTICSEARCH_DSL = {
    "default": {
        "hosts": os.environ.get("ELASTICSEARCH_HOST", "localhost:9200"),
        "timeout": os.environ.get("ELASTICSEARCH_TIMEOUT", 300),
    },
}


# DJANGO REDIS
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ["REDIS_URL"],
        "TIMEOUT": None,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# SORL THUMBNAIL SETTINGS
THUMBNAIL_KVSTORE = "sorl.thumbnail.kvstores.redis_kvstore.KVStore"
THUMBNAIL_FORCE_OVERWRITE = True
THUMBNAIL_PRESERVE_FORMAT = True


# CELERY
CELERY_BACKEND = os.environ["CELERY_BACKEND"]
CELERY_BROKER_URL = os.environ["CELERY_BROKER_URL"]
CELERY_RESULT_BACKEND = os.environ["CELERY_RESULT_BACKEND"]

CELERY_TASK_SERIALIZER = "pickle"
CELERY_RESULT_SERIALIZER = "pickle"
CELERY_ACCEPT_CONTENT = ["pickle"]
CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = "Europe/Stockholm"


COLLECTFAST_STRATEGY = "collectfast.strategies.boto3.Boto3Strategy"
COLLECTFAST_THREADS = 4

# ANYMAIL
ANYMAIL = {
    "MAILGUN_API_KEY": os.environ["MAILGUN_API_KEY"],
    "MAILGUN_SENDER_DOMAIN": os.environ["MAILGUN_SENDER_DOMAIN"],
    "MAILGUN_API_URL": os.environ["MAILGUN_API_URL"],
}
EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
DEFAULT_FROM_EMAIL = "Supplers <mg@supplers.com>"
SERVER_EMAIL = os.environ["SERVER_EMAIL"]

# Needed since Django 3.2
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

DJANGO_REST_PASSWORDRESET_NO_INFORMATION_LEAKAGE = True

# FIREBASE SETTINGS
if os.path.isfile(os.environ.get("GOOGLE_APPLICATION_CREDENTIALS", None)):
    from firebase_admin import initialize_app

    initialize_app(
        credential=None, options={"databaseURL": os.environ["FIREBASE_DATABASE_URL"]}
    )

HEALTH_CHECK = {
    "DISK_USAGE_MAX": 90,  # percent
    "MEMORY_MIN": 100,  # in MB
}


# For testing directly with sqlite
if "test" in sys.argv:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:",
            "TEST": {},
        }
    }
    REST_FRAMEWORK.update(
        {
            "DEFAULT_THROTTLE_RATES": {"anon": "120/minute", "user": "480/minute"},
        }
    )


VERSATILEIMAGEFIELD_SETTINGS = {
    "jpeg_resize_quality": 80,
}


AXES_FAILURE_LIMIT = 10


SESSION_ENGINE = "redis_sessions.session"

SESSION_REDIS = {
    "host": "localhost",
    "port": 6379,
    "db": 0,
    "prefix": "session",
    "socket_timeout": 1,
    "retry_on_timeout": False,
}


TWILIO_PHONE_NUMBER = "+46761234567"
TWILIO_ACCOUNT_SID = "abcdef123456"
TWILIO_AUTH_TOKEN = "12456abcdef"


STRIPE_PUBLIC_KEY = os.environ.get("STRIPE_PUBLIC_KEY")
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SIGNING_SECRET = os.environ.get("STRIPE_WEBHOOK_SIGNING_SECRET")
